<button id="themeToggle" class="nav" type="button" aria-pressed="false" style="display:flex;align-items:center;gap:.5rem;border:0;background:none;cursor:pointer">
  <svg class="icon" width="20" height="20" viewBox="0 0 24 24" aria-hidden="true">
    <path class="sun"  
    fill-rule="evenodd"   
    stroke="currentColor"       
    stroke-width="1.5"           
    fill="none"
    d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"/>
    <path class="moon" fill-rule="evenodd"
    d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"/>
  </svg>
  <span id="themeLabel" style="font-size:14px; font-weight:bold;">—</span>


  <style>
    .sun{fill:#111}.moon{fill:transparent}
    :global(html.dark) .sun{fill:transparent}
    :global(html.dark) .moon{fill:#fff}

     /* label 颜色随主题切换 */
    #themeLabel { color:#111; }                 /* 亮色模式 */
    :global(html.dark) #themeLabel { color:#fff; }  /* 暗色模式 */

  </style>

<script is:inline>
  const html  = document.documentElement;
  const btn   = document.getElementById('themeToggle');
  const label = document.getElementById('themeLabel');

  // 配置时间段（本地时间，24h制）
  const BRIGHT_START = 7;   // 7:00 含
  const BRIGHT_END   = 18;  // 18:00 不含（18:00 开始进入 dark）

  // 计算当前时间应当使用的主题
  const inferThemeByTime = () => {
    const h = new Date().getHours();   // 0~23，使用用户电脑时间
    return (h >= BRIGHT_START && h < BRIGHT_END) ? 'light' : 'dark';
  };

  // 应用主题 + 辅助UI
  const apply = (t) => {
    if (t === 'dark') html.classList.add('dark'); else html.classList.remove('dark');
    label && (label.textContent = t === 'dark' ? 'Dark mode' : 'Light mode');
    btn?.setAttribute('aria-pressed', String(t === 'dark'));
  };

  // 计算到“下一次边界（7点或18点）”还剩多少毫秒，用于定时自动切换
  const msUntilNextBoundary = () => {
    const now = new Date();
    const h = now.getHours();

    // 下一个目标小时（如果当前在亮色区间，则目标是 18 点，否则目标是 7 点（明天））
    let target = new Date(now);
    if (h >= BRIGHT_START && h < BRIGHT_END) {
      target.setHours(BRIGHT_END, 0, 0, 0);   // 今天 18:00
    } else {
      // 如果现在 >=18 或 <7，则目标是 7 点
      // 若已过当天 7 点，则设为“明天 7 点”
      target.setHours(BRIGHT_START, 0, 0, 0);
      if (target <= now) target.setDate(target.getDate() + 1);
    }
    return target - now;
  };

  // 模式：'auto' | 'light' | 'dark'
  const getMode = () => localStorage.getItem('themeMode') || 'auto';
  const setMode = (m) => localStorage.setItem('themeMode', m);

  // 按模式初始化
  const init = () => {
    const mode = getMode();
    if (mode === 'auto') {
      apply(inferThemeByTime());
      scheduleNextFlip(); // 到 7:00/18:00 自动切一次
    } else {
      apply(mode);        // 用户手动设过，尊重手动设置
    }
  };

  // 到边界时自动切换（仅在 auto 模式下生效）
  let boundaryTimer = null;
  const scheduleNextFlip = () => {
    clearTimeout(boundaryTimer);
    boundaryTimer = setTimeout(() => {
      if (getMode() === 'auto') {
        apply(inferThemeByTime());
        scheduleNextFlip(); // 继续排下一次
      }
    }, msUntilNextBoundary());
  };

  // 点击：切换 light/dark，并切到“手动模式”
  btn?.addEventListener('click', () => {
    const isDark = html.classList.contains('dark');
    const next = isDark ? 'light' : 'dark';
    setMode(next);     // 进入手动模式（存具体主题）
    apply(next);
    clearTimeout(boundaryTimer); // 手动后不再自动切
  });

  // 首次运行
  init();
</script>

</button>
